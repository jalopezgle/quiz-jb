Ejercicio P2P Obligatorio

Explicación de la tarea

Crear un repositorio en Github donde subir el proyecto que se les pide desarrollar en los siguientes apartados de esta práctica.

El proyecto debe rehacer  el servidor Quiz desde cero, repitiendo los mismos pasos descritos en las transparencias de clase. No se permite clonar el repositorio oficial de la asignatura que aloja el servidor Quiz. Debe repetirse el desarrollo desde cero.

Además se deben añadir los siguientes cambios a Quiz:

1) Modificar el servidor Quiz para añadir un enlace en el píe de página <footer> del marco de las páginas renderizadas que apunte a la página de su proyecto en GitHub.

2) Modificar el servidor Quiz para que sirva una nueva página con los datos de los autores de la práctica. Este desarrollo se realizará en una rama llamada créditos. Cree la rama creditos y cámbiese a ella para hacer el desarrollo pedido en este apartado.

Crear un nuevo enlace en la barra de navegación que apunte a la página de créditos. 

La ruta de acceso a esta página debe ser /author.
Modifique el router (routers/index.js) para que atienda las peticiones "GET /author" y sirva una nueva vista views/author.ejs con los datos de los autores o autor de la página, mostrando el nombre de los autores, su fotografía y un pequeño video (opcional) de 30 seg.
Cuando se haya terminado este desarrollo, integrelo en la rama master, y súbalo a GitHub.

Una vez realizados y probados estos cambios, debe crearse una cuenta en heroku para desplegar allí el servidor desarrollado en esta práctica.

Se deben seguir los mismos pasos explicados en las transparencias para realizar el despliegue.

Actualice GitHub con los cambios realizados en este apartado.

El proyecto desarrollado en esta practica, junto con todas las modificaciones añadidas, debe subirse al repositorio creado en Github por los alumnos.

Entregar en el texto de la entrega a MiriadaX

1) El URL al despliegue en Heroku como un enlace clicable.

2) El URL al proyecto en GITHUB como un enlace clicable.

El evaluador debe comprobar que en Heroku se ha desplegado la aplicación con los cambios solicitados y que en GITHUB se ha subido el proyecto y que los cambios solicitados se han introducido en el último commit.

https://github.com/jalopezgle/quiz-jb/

https://quiz-2015-jb.herokuapp.com/

https://quiz-2015-jb.herokuapp.com/

git push origin master

git merge creditos

git commit -a -m "Autores"


git checkout master



----tarea p2p tema 7

Explicación de la tarea

Añadir a Quiz un Buscador de Preguntas
Se pide añadir un formulario de búsqueda en la página que muestra la lista de preguntas (/quizes). El formulario tendrá un campo para introducir el texto a buscar, y un botón enviar (submit). El resultado de la búsqueda contendrá todas las preguntas que contengan el texto introducido en el formulario ordenadas alfabéticamente.

Este desarrollo debe realizarse en una rama llamada busquedas, la cual se mezclara con la rama master una vez se haya terminado esta práctica.

La ruta de la lista de preguntas podrá llevar una query opcional con el texto a buscar, quedando la primitiva del interfaz REST así:

GET  /quizes?search=texto_a_buscar

Esta primitiva devolverá la página con el listado de todas las preguntas que contengan el texto indicado, ordenadas alfabeticamente.

El formulario de búsqueda deberá ser de tipo GET y enviar un parámetro "search" con el texto (string) buscado. De esta forma, si en el formulario se escribe Italia, al pulsar el botón de submit, se enviará al servidor: GET /quizes?search=Italia.

Para implementar esta funcionalidad hay que modificar la acción index del controlador (controllers/quiz_controller.js) para que busque las preguntas que contienen el texto especificado en la query.

Para realizar la búsqueda de las preguntas en la base de datos, use la función findAll de sequelize. Debe usar el operador LIKE y el comodín % en la condición WHERE. Debe usar un formato como este:

findAll({where: ["pregunta like ?", search]}]

No olvide delimitar el string contenido en search con el comodín % antes y después y cambie también los espacios en blanco por %. De esta forma, si busca "uno dos" ("%uno%dos%"), mostrará todas las preguntas que tengan "uno" seguido de "dos", independientemente de lo que haya entre "uno" y "dos".

Finalmente, despliegue en heroku su practica y suba los cambios a GitHub.



-----LISTA TABLAS EN HEROKU
SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'




--------------------------------------------

Se pide añadir un índice temático a cada pregunta introducida que diga si es una pregunta relativa a Humanidades, Ocio, Ciencia o Tecnología.

Para implementar esta funcionalidad habrá que  actualizar el modelo, introduciendo este nuevo campo en la tabla "Quiz" de preguntas. Además habra que que actualizar los controladores y las vistas afectados por este cambio.

Se recomienda utilizar el elemento <select> de HTML en los formularios de creación y ediciónpara enviar parámetros de una lista preseleccionada:

<select name="tema">
  <option value="otro" selected>Otro</option>
  <option value="humanidades">Humanidades</option>
  <option value="ocio">Ocio</option>
  <option value="ciencia">Ciencia</option>
  <option value="tecnologia">Tecnología</option>
</select>
 
Una vez realizada, se deberá guardar una nueva versión (commit) con esta funcionalidad, la cual se desplegará en heroku y se subirá a GitHub.

git clone https://github.com/sqlitebrowser/sqlitebrowser/releases


-----------------------------------------------

Funciona todo perfecto menos la página de "autores". A mi me pasó lo mismo y lo que hice fue programarlo correctamente utilizando MVC y pasando el string vacío de errores (que es la razón por la cual te sale ese error).

 

Saludos y sigue así.

Te da error en la pagina de autor. El error me daba tambien a mi, y es que te falta en index.js:

/* GET author. */
router.get('/author', function(req, res, next) {
  res.render('author', {authors: [{ name: 'Ricardo Garcia', urlphoto: '/images/rgr.jpg' }], errors: [] });
});
 

 -------------------------------
Se pide añadir a la gestión de sesiones un mecanismo de autologout, de forma que si un usuario está inactivo (sin enviar ninguna solicitud HTTP) más de 2 minutos, la sesión se desconecte y deba volver a autenticarse para continuar.

Para implementar esta funcionalidad se recomienda añadir un middleware de auto-logout en app.js que guarde en cada transacción la hora del reloj del sistema en una variable de la sesión a la que está asociada. El middleware debe comprobar en cada transacción con una sesión activa si la han transcurrido más de 2 minutos desde la transacción anterior en dicha sesión, en cuyo caso destruirá la sesión.

Una vez realizados los cambios, debe guardarse una nueva versión (commit).

Ampliación opcional: Añadir una página de estadisticas
 
Las personas interesadas en practicar más con express y MVC, pueden añadir una página de estadisticas. La página de estadisticas estará accesible directamente desde la barra de navegación y mostrará las siguientes informaciones extraidas de la base de datos:

El número de preguntas
El número de comentarios totales
El número medio de comentarios por pregunta
El número de preguntas sin comentarios
El número de preguntas con comentarios
Para implementar esta funcionalidad habra que crear una nueva entrada en el interfaz REST de quizes asociada a la ruta

     GET /quizes/statistics

Además habra que crear un nuevo controlador que extraiga la información de la base de datos y una nueva vista que la presente.

Una vez realizado habra que guardar esta funcionalidad en una nueva versión (commit). a continuación se desplegará la rama en heroku y se subirá a GitHub.
 

----- configurar openssl
 set OPENSSL_CONF=C:\Users\javil\Downloads\CURSO HTML5 Y NODEJS\openssl-0.9.8s-i386-win32\openssl.cnf

 ----- comentarios en el foro
 stat -c '%U:%G %A' ~/.npm


var questionsNumber = 0;
 2var commentsNumber = 0;
 3
 4models.Quiz.count()
 5.then(function (questionNumber) {
 6    questionsNumber = questionNumber;
 7    return models.Comment.count();
 8})
 9.then(function (commentNumber) {
10    commentsNumber = commentNumber;
11})
12.finally(function () {
13    res.render('estadisticas/index', {quizes: questionNumber , errors: []});
14});





stats.questionNumber = count;
             Comment.count().then(
                 function(ccount){
-                    stats.commentNumber = ccount;                                        
-                    res.render('stats/stats', {stats: stats, errors: errors});
+                    stats.commentNumber = ccount;                         
+                    Quiz.avgCommentCount(
+                        function(c){
+                            stats.avgComment = c[0].c;
+                            Quiz.noCommentCount(
+                                function(c){
+                                    stats.questionWithoutComments = c[0].c;
+                                    Quiz.commentCount(
+                                        function(c){
+                                            stats.questionWithComments = c[0].c;

+                                            res.render('stats/stats', {stats: stats, errors: errors});
+                                        },function(err){
+                                            next(err);
+                                        }                                        
+                                    );
+                                },
+                                function(err){
+                                    next(err);
+                                }                               
+                            );                           
+                        }, function(err){
+                            next(err);
+                        }
+                    );                    
                 }
             ).catch(function(error){next(error)});
         }
View 19  models/models.js
 @@ -35,6 +35,25 @@ var Comment = sequelize.import(comment_path);
 Comment.belongsTo(Quiz);
 Quiz.hasMany(Comment);
 
+Quiz.avgCommentCount = function(callback, cerror){    
+    sequelize.query("SELECT AVG(c) as c FROM (SELECT QuizId, COUNT(DISTINCT b.id) c FROM Quizzes a LEFT JOIN Comments b ON a.id = b.QuizId  GROUP BY a.id ) a")
+    .then(function(c){ callback(c);})
+    .catch(function(error){cerror(error)});
+};
+
+Quiz.noCommentCount = function(callback, cerror){    
+    sequelize.query("SELECT COUNT(*) as c FROM Quizzes a WHERE NOT EXISTS (SELECT 1 FROM Comments b WHERE a.id = b.QuizId) ")
+    .then(function(c){ callback(c);})
+    .catch(function(error){cerror(error)});
+};
+
+Quiz.commentCount = function(callback, cerror){    
+    sequelize.query("SELECT COUNT(*) as c FROM Quizzes a WHERE EXISTS (SELECT 1 FROM Comments b WHERE a.id = b.QuizId) ")
+    .then(function(c){ callback(c);})
+    .catch(function(error){cerror(error)});
+};
+
+
 exports.Quiz = Quiz;
 exports.Comment = Comment;






Ejercicio compañera bien hecho:
https://github.com/raquelrodriguezb/quiz